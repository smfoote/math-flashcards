{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../FlashCard.svelte",
    "../../IncorrectGuess.svelte",
    "../../Problem.svelte",
    "../../Test.svelte",
    "../../TestTypeSelector.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import FlashCard from './FlashCard.svelte';\n  import IncorrectGuess from './IncorrectGuess.svelte';\n\n  let incorrectGuess;\n  const showIncorrectGuess = ({ detail: { guess } }) => {\n    incorrectGuess = guess;\n    setTimeout(() => {\n      incorrectGuess = null;\n    }, 3000);\n  };\n</script>\n\n<style>\n  :global(body) {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n  }\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  h1 {\n    font-size: 4em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n</style>\n\n<main>\n  <h1>Math Flash!</h1>\n\n  <FlashCard on:incorrectGuess={showIncorrectGuess} />\n\n  {#if incorrectGuess}\n    <IncorrectGuess guess={incorrectGuess} />\n  {/if}\n</main>\n",
    "<script>\n  import Test from './Test.svelte';\n  import TestTypeSelector from './TestTypeSelector.svelte';\n\n  let cl = '';\n\n  let operator = null;\n\n  const typeSelected = (op) => {\n    operator = op;\n  };\n\n  const answerReceived = ({ detail: { wasLastCorrect } }) => {\n    const answerClass = wasLastCorrect ? 'correct-answer' : 'wrong-answer';\n    cl = answerClass;\n    setTimeout(() => {\n      cl = '';\n    }, 900);\n  };\n</script>\n\n<style>\n  section {\n    border: 3px solid rgba(0, 0, 0, 0.5);\n    background-color: #fff;\n    border-radius: 8px;\n    width: 400px;\n    height: 500px;\n    margin: 0 auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n    transition: all 400ms ease-in-out;\n  }\n\n  section.correct-answer {\n    border-color: #03d400;\n    background-color: rgba(3, 212, 0, 0.25);\n  }\n  section.wrong-answer {\n    border-color: #e40000;\n    background-color: rgba(255, 0, 0, 0.25);\n  }\n</style>\n\n<section class={cl}>\n  {#if operator}\n    <Test {operator} on:answer={answerReceived} on:incorrectGuess />\n  {:else}\n    <TestTypeSelector on:click={() => typeSelected('add')}>\n      Addition\n    </TestTypeSelector>\n    <TestTypeSelector on:click={() => typeSelected('subtract')}>\n      Subtraction\n    </TestTypeSelector>\n    <TestTypeSelector on:click={() => typeSelected('multiply')}>\n      Multiplication\n    </TestTypeSelector>\n    <TestTypeSelector on:click={() => typeSelected('divide')}>\n      Division\n    </TestTypeSelector>\n  {/if}\n</section>\n",
    "<script>\n  export let guess;\n</script>\n\n<style>\n  div {\n    display: flex;\n    width: 400px;\n    margin: 0 auto;\n    justify-content: center;\n    font-size: 45px;\n    color: #ff002e;\n  }\n</style>\n\n<div>{guess} is not the right answer</div>\n",
    "<script>\n  export let operator, operandA, operandB;\n</script>\n\n<style>\n  .operand {\n    text-align: right;\n    font-size: 48px;\n    width: 156px;\n  }\n  .operand--b::before {\n    font-size: 64px;\n    margin-right: 24px;\n  }\n  .operand--b {\n    border-bottom: 4px solid black;\n  }\n  .add.operand--b::before {\n    content: '+';\n  }\n  .subtract.operand--b::before {\n    content: '-';\n  }\n  .multiply.operand--b::before {\n    content: 'x';\n  }\n  .divide.operand--b::before {\n    content: 'รท';\n  }\n</style>\n\n<div class=\"operand operand--a\">{operandA}</div>\n<div class=\"operand operand--b {operator}\">{operandB}</div>\n",
    "<script>\n  import { createEventDispatcher } from 'svelte';\n  import Problem from './Problem.svelte';\n  export let operator = 'add';\n\n  const dispatch = createEventDispatcher();\n\n  // Set up speech recognition\n  const SpeechRecognition = window.SpeechRecognition || webkitSpeechRecognition;\n  const SpeechRecognitionEvent =\n    window.SpeechRecognitionEvent || webkitSpeechRecognitionEvent;\n\n  const recognition = new SpeechRecognition();\n  recognition.continuous = true;\n  recognition.lang = 'en-US';\n  recognition.interimResults = false;\n  recognition.maxAlternatives = 5;\n\n  const families = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 'all'];\n  let family;\n  let operandA, operandB;\n  let answer;\n\n  let correctAnswers = [];\n  let incorrectAnswers = [];\n\n  const operations = {\n    add(a, b) {\n      return a + b;\n    },\n    subtract(a, b) {\n      return a - b;\n    },\n    multiply(a, b) {\n      return a * b;\n    },\n    divide(a, b) {\n      operandA = a * b;\n      operandB = b;\n      return operandA === 0 && operandB === 0 ? 0 : a;\n    },\n  };\n\n  const selectFamily = (fam) => {\n    family = fam;\n    recognition.start();\n    setOperands();\n  };\n\n  const setOperands = () => {\n    dispatch('incorrectGuess', { guess: null });\n    const firstRandom =\n      family === 'all' ? Math.floor(Math.random() * 13) : family;\n    const secondRandom = Math.floor(Math.random() * 13);\n    const swap = Math.random() > 0.5;\n    operandA = swap ? secondRandom : firstRandom;\n    operandB = swap ? firstRandom : secondRandom;\n    if (operator === 'subtract' && operandB > operandA) {\n      [operandA, operandB] = [operandB, operandA];\n    }\n    answer = operations[operator](operandA, operandB);\n  };\n\n  const recordAnswer = (wasLastCorrect, guess) => {\n    dispatch('answer', { wasLastCorrect });\n    const answer = { a: operandA, b: operandB, guess };\n    if (wasLastCorrect) {\n      correctAnswers = [...correctAnswers, answer];\n    } else {\n      incorrectAnswers = [...incorrectAnswers, answer];\n    }\n    console.log('CORRECT', correctAnswers);\n    console.log('INCORRECT', incorrectAnswers);\n  };\n\n  const showError = (guess) => {\n    dispatch('incorrectGuess', { guess });\n  };\n\n  recognition.onresult = function (event) {\n    const speech = event.results[event.results.length - 1][0].transcript;\n    let guess = speech;\n    let isCorrect;\n    if (guess === 'pass') {\n      isCorrect = false;\n    } else {\n      guess = parseInt(guess, 10);\n      isCorrect = guess === answer;\n      // The top result might not be a number, so try a few more options\n      if (isNaN(guess)) {\n        console.log(Array.from(event.results[event.results.length - 1]));\n        try {\n          guess = parseInt(\n            Array.from(event.results[event.results.length - 1]).find(\n              (g) => !isNaN(parseInt(g.transcript, 10))\n            ).transcript,\n            10\n          );\n        } catch (err) {\n          showError(event.results[event.results.length - 1][0].transcript);\n        }\n        isCorrect = guess === answer;\n      }\n    }\n    if (isCorrect) {\n      setOperands();\n    } else {\n      showError(isNaN(guess) ? speech : guess);\n    }\n    recordAnswer(isCorrect, guess);\n  };\n\n  recognition.onspeechend = () => {\n    recognition.stop();\n  };\n</script>\n\n<style>\n  .family-list {\n    padding: 16px;\n  }\n\n  .family-option {\n    border: 1px solid #000;\n    background: none;\n    width: 40px;\n    height: 40px;\n    margin: 12px;\n    cursor: pointer;\n  }\n</style>\n\n<div>\n  {#if family}\n    <Problem {operandA} {operandB} {operator} />\n  {:else}\n    <h3 class=\"start\">Start with</h3>\n    <div class=\"family-list\">\n      {#each families as familyOption}\n        <button\n          class=\"family-option\"\n          on:click={() => selectFamily(familyOption)}>\n          {familyOption}\n        </button>\n      {/each}\n    </div>\n  {/if}\n</div>\n",
    "<style>\n  .test-type {\n    border: none;\n    background: none;\n    font-size: 48px;\n    cursor: pointer;\n    margin: 0;\n  }\n\n  .test-type:not(:last-of-type) {\n    border-bottom: 2px solid black;\n  }\n</style>\n\n<button class=\"test-type\" data-operator=\"add\" id=\"addition-button\" on:click>\n  <slot />\n</button>\n"
  ],
  "names": [],
  "mappings": "AAcU,IAAI,AAAE,CAAC,AACb,WAAW,CAAE,UAAU,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,UAAU,AAC9D,CAAC,AACD,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,cAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC;ACXD,OAAO,eAAC,CAAC,AACP,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,gBAAgB,CAAE,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,KAAK,CACb,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,OAAO,CAAE,IAAI,CACb,WAAW,CAAE,MAAM,CACnB,eAAe,CAAE,MAAM,CACvB,cAAc,CAAE,MAAM,CACtB,UAAU,CAAE,GAAG,CAAC,KAAK,CAAC,WAAW,AACnC,CAAC,AAED,OAAO,eAAe,eAAC,CAAC,AACtB,YAAY,CAAE,OAAO,CACrB,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AACzC,CAAC,AACD,OAAO,aAAa,eAAC,CAAC,AACpB,YAAY,CAAE,OAAO,CACrB,gBAAgB,CAAE,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,AACzC,CAAC;ACtCD,GAAG,cAAC,CAAC,AACH,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,KAAK,CACZ,MAAM,CAAE,CAAC,CAAC,IAAI,CACd,eAAe,CAAE,MAAM,CACvB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,OAAO,AAChB,CAAC;ACPD,QAAQ,cAAC,CAAC,AACR,UAAU,CAAE,KAAK,CACjB,SAAS,CAAE,IAAI,CACf,KAAK,CAAE,KAAK,AACd,CAAC,AACD,yBAAW,QAAQ,AAAC,CAAC,AACnB,SAAS,CAAE,IAAI,CACf,YAAY,CAAE,IAAI,AACpB,CAAC,AACD,WAAW,cAAC,CAAC,AACX,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAChC,CAAC,AACD,IAAI,yBAAW,QAAQ,AAAC,CAAC,AACvB,OAAO,CAAE,GAAG,AACd,CAAC,AACD,SAAS,yBAAW,QAAQ,AAAC,CAAC,AAC5B,OAAO,CAAE,GAAG,AACd,CAAC,AACD,SAAS,yBAAW,QAAQ,AAAC,CAAC,AAC5B,OAAO,CAAE,GAAG,AACd,CAAC,AACD,OAAO,yBAAW,QAAQ,AAAC,CAAC,AAC1B,OAAO,CAAE,GAAG,AACd,CAAC;AC0FD,YAAY,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,AACf,CAAC,AAED,cAAc,eAAC,CAAC,AACd,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,UAAU,CAAE,IAAI,CAChB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,IAAI,CACZ,MAAM,CAAE,OAAO,AACjB,CAAC;AChID,UAAU,cAAC,CAAC,AACV,MAAM,CAAE,IAAI,CACZ,UAAU,CAAE,IAAI,CAChB,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,CAAC,AACX,CAAC,AAED,wBAAU,KAAK,aAAa,CAAC,AAAC,CAAC,AAC7B,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAChC,CAAC"
}